service: scheduler-${env:REGION}

plugins:
  - serverless-dotenv-plugin
  - serverless-python-requirements
provider:
  name: aws
  runtime: python3.8
  memorySize: 128
  timeout: 900
  region: ${env:REGION}
  environment:
    DEGUG: ${env:DEGUG}
    REGION: ${env:REGION}
    RDS_SCHEDULE: ${env:RDS_SCHEDULE}
    EC2_SCHEDULE: ${env:EC2_SCHEDULE}
    TIME: ${env:TIME}
    TAG: schedule
    DYNAMODB_TABLE: ecs-schedule
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:DescribeInstances"
        - "ec2:DescribeRegions"
        - "ec2:StartInstances"
        - "ec2:StopInstances"
        - "rds:DescribeDBInstances"
        - "rds:DescribeDBClusters"
        - "rds:StartDBInstance"
        - "rds:StopDBInstance"
        - "rds:ListTagsForResource"
        - "ecs:ListClusters"
        - "ecs:ListTagsForResource"
        - "ecs:ListServices"
        - "ecs:DescribeServices"
        - "ecs:UpdateService"
        - "logs:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan  
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    ECSScheduleTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: service
            AttributeType: S
        KeySchema:
          - AttributeName: service
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

functions:
  function:
    handler: scheduler.handler
    events:
      - schedule: cron(0 * * * ? *)

custom:
  pythonRequirements:
    dockerizePip: false
