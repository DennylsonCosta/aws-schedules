service: scheduler
disabledDeprecations: '*'
useDotenv: true
plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
custom:
  pythonRequirements:
    dockerizePip: true
provider:
  name: aws
  runtime: python3.9
  memorySize: 128
  timeout: 900
  region: ${env:REGION}
  environment:
    DEGUG: ${env:DEGUG}
    TAG: schedule
    TIME: ${env:TIME}
    DYNAMODB_TABLE: ${env:DYNAMODB_TABLE}
    RDS_SCHEDULE: ${env:RDS_SCHEDULE}
    EC2_SCHEDULE: ${env:EC2_SCHEDULE}
    ECS_SCHEDULE: ${env:ECS_SCHEDULE}
    ASG_SCHEDULE: ${env:ASG_SCHEDULE}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:DescribeInstances"
        - "ec2:DescribeRegions"
        - "ec2:StartInstances"
        - "ec2:StopInstances"
        - "rds:DescribeDBInstances"
        - "rds:DescribeDBClusters"
        - "rds:StartDBInstance"
        - "rds:StartDBCluster"
        - "rds:StopDBInstance"
        - "rds:StopDBCluster"
        - "rds:ListTagsForResource"
        - "ecs:*"
        - "autoscaling:*"
        - "logs:*"
        - "application-autoscaling:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan  
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    ECSScheduleTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: service
            AttributeType: S
        KeySchema:
          - AttributeName: service
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${env:DYNAMODB_TABLE}

functions:
  function:
    handler: scheduler.handler
    events:
      - schedule:
          rate: cron(0 * * * ? *)
          enabled: true
